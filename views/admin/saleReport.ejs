<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Product Admin - Dashboard HTML Template</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,700">
    <!-- https://fonts.google.com/specimen/Roboto -->
    <link rel="stylesheet" href="admin/css/fontawesome.min.css">
    <!-- https://fontawesome.com/ -->
    <link rel="stylesheet" href="admin/css/bootstrap.min.css">
    <!-- https://getbootstrap.com/ -->
    <link rel="stylesheet" href="admin/css/templatemo-style.css">
    <!--
	Product Admin CSS Template
	https://templatemo.com/tm-524-product-admin
	-->
</head>

<body id="reportsPage" style="background-color: black;">
    <div class="" id="home">
        <%-include('./partials/nav.ejs')%>
        <br>
        <h3 class="sales-report-title">salesReport</h3>
        <div class="tm-bg-primary-dark tm-block tm-block-products" style="height: 20px;">
            <br><br>

            <div class="tm-bg-primary-dark tm-block tm-filter-section" style="height: 120px;">
                <div class="row">
                    <div class="col-md-5">
                        <label for="customDateRange">Custom Date Range:</label>
                        <div class="input-group">
                            <input type="date" class="form-control" id="startDate">
                            <span class="input-group-text tm-text-color-dark">to</span>
                            <input type="date" class="form-control" id="endDate">
                            <button class="btn btn-primary" id="apply">Apply</button>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="salesFilter">Sales Report:</label>
                        <div class="input-group">
                            <select class="custom-select" id="salesFilter">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="yearly">Yearly</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-primary" id="downloadPdf">Download PDF</button>
                        <button class="btn btn-primary" id="downloadExcel">Download Excel</button>
                    </div>
                    
                </div>
            </div>
            
            




        <div class="tm-product-table-container">
            <table class="table table-hover tm-table-small tm-product-table">
                <thead id="tableHeader">
                <tr>
                  <th scope="col">ORDER NO</th>
                  <th scope="col">PRODUCT NAME</th>
                  <th scope="col">USERNAME</th>
                  <th scope="col">ADDRESS</th>
                  <th scope="col">QUANTITY</th>
                  <th scope="col">TOTALPRICE</th>
                  <th scope="col">DISCOUNT</th>
                  <th scope="col">PAYMENT METHOD</th>
                  <th scope="col">DATE & TIME</th>
                 
                 
                 
                </tr>
              </thead>
              <tbody>
                <tbody id="tableBody">
                    <!-- Table body content will be dynamically updated -->
                    <% if (typeof data.filteredData === 'undefined' || data.filteredData.length === 0) { %>
                        <% orderData.forEach((items, id) => { %>
                            <% items.products.forEach(product => { %>
                                <tr>
                                    <th scope="col"><%= items.orderNumber %></th>
                                    <th scope="col"><%= product.productName %></th>
                                    <th scope="col"><%= userNames[id] %></th>
                                    <th scope="col"><%= items.address.address %>, <%= items.address.city %>, <%= items.address.state %>, <%= items.address.country %>, <%= items.address.zipcode %></th>
                                    <th scope="col"><%= product.quantity %></th>
                                    <th scope="col"><%= product.price * product.quantity %></th>
                                    <th scope="col"></th>
                                    <th scope="col"><%= items.paymentMethod %></th>
                                    <th scope="col"><%= new Date(items.orderDate).toLocaleDateString("en-US") %> <%= new Date(items.orderDate).toLocaleTimeString("en-US", { hour: '2-digit', minute: '2-digit' }) %></th>
                                </tr>
                            <% }) %>
                        <% }) %>
                    <% } %>
                </tbody>
                
                </table>
                </div>
                </div>
                </div>


        <footer class="tm-footer row tm-mt-small">
            <div class="col-12 font-weight-light">
                <p class="text-center text-white mb-0 px-4 small">
                    Copyright &copy; <b>2024</b> All rights reserved. 
                    
                    Design: <a rel="nofollow noopener" href="https://templatemo.com" class="tm-footer-link">Secure Skull</a>
                </p>
            </div>
        </footer>
    </div>
 <script>
    document.addEventListener("DOMContentLoaded", function () {
    // Add event listener to the apply button
    document.getElementById("apply").addEventListener("click", function () {
        var startDate = document.getElementById("startDate").value;
        var endDate = document.getElementById("endDate").value;
        var salesFilter = document.getElementById("salesFilter").value;

        // Construct the request body
        var data = {
            startDate: startDate,
            endDate: endDate,
            salesFilter: salesFilter
        };

        // Make Fetch request to server
        fetch("/filterData", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ data: data })
        })
        .then(function (response) {
            if (!response.ok) {
                throw new Error("Network response was not ok");
            }
            return response.json(); // Parse response as JSON
        })
        .then(function (data) {
            console.log("Filtered data:", data.filteredData);
            updateTable(data.filteredData, data.userNames); // Call function to update table with filtered data and usernames
        })
        .catch(function (error) {
            console.error("Error:", error);
        });
    });

    // Add event listener to the salesFilter dropdown
    document.getElementById("salesFilter").addEventListener("change", function () {
        // Trigger click event of Apply button when sales filter is changed
        document.getElementById("apply").click();
    });
});

// Function to update table with filtered data and usernames
function updateTable(filteredData, userNames) {
    var tableBody = document.getElementById("tableBody"); // Get table body element
    tableBody.innerHTML = ""; // Clear existing rows

    // Loop through the filtered data and create table rows
    if (Array.isArray(filteredData)) {
        filteredData.forEach(function (item, index) {
            item.products.forEach(function (product) {
                var row = document.createElement("tr");
                row.innerHTML = `
                    <td>${item.orderNumber}</td>
                    <td>${product.productName}</td>
                    <td>${userNames[index]}</td> <!-- Use index to get the corresponding username -->
                    <td>${item.address.address}, ${item.address.city}, ${item.address.state}, ${item.address.country}, ${item.address.zipcode}</td>
                    <td>${product.quantity}</td>
                    <td>${product.price * product.quantity}</td>
                    <td></td>
                    <td>${item.paymentMethod}</td>
                    <td>${new Date(item.orderDate).toLocaleDateString("en-US")} ${new Date(item.orderDate).toLocaleTimeString("en-US", { hour: '2-digit', minute: '2-digit' })}</td>
                `;
                tableBody.appendChild(row);
            });
        });
    } else {
        // Handle case when filteredData is not an array (e.g., single order)
        // You can create a single row for the order here if needed
        console.log("Filtered data is not an array:", filteredData);
    }
}

 </script>

 <script>
                // Add event listener to the Download PDF button
            document.getElementById("downloadPdf").addEventListener("click", function () {
                downloadFile("/generatePdf");
            });

            // Add event listener to the Download Excel button
            document.getElementById("downloadExcel").addEventListener("click", function () {
                downloadFile("/generateExcel");
            });

          // Function to download file via AJAX
function downloadFile(url) {
    fetch(url, {
        method: "POST",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ tableData: getTableData(), headers: getTableHeaders() }) // Send table data to the server
    })
    .then(function (response) {
        if (!response.ok) {
            throw new Error("Network response was not ok");
        }
        return response.blob(); // Get the response body as a Blob
    })
    .then(function (blob) {
        console.log("Blob object:", blob) 
        // Create a temporary link element to trigger the download
        var link = document.createElement("a");
        
        link.href = window.URL.createObjectURL(blob);
        
        link.download = "report"; // Set the default filename
        link.click(); // Trigger the download
    })
    .catch(function (error) {
        console.error("Error:", error);
    });
}

// Function to extract table data
function getTableData() {
    var data = [];
    var rows = document.querySelectorAll('#tableBody tr');
   
    rows.forEach(function(row) {
        var rowData = [];
        row.querySelectorAll("th, td").forEach(function(cell) { // Check both "th" and "td"
            rowData.push(cell.textContent.trim());
        });
        data.push(rowData);
    });
    console.log('sdfgh',data);
    return data;
}


    function getTableHeaders() {
        var headers = [];
        var headerCells = document.querySelectorAll('#tableHeader th');
        headerCells.forEach(function(cell) {
            headers.push(cell.textContent.trim());
        });
        return headers;
    }




 </script>
 
    
    
    
    <script src="admin/js/jquery-3.3.1.min.js"></script>
    <!-- https://jquery.com/download/ -->
    <script src="admin/js/moment.min.js"></script>
    <!-- https://momentjs.com/ -->
    <script src="admin/js/Chart.min.js"></script>
    <!-- http://www.chartjs.org/docs/latest/ -->
    <script src="admin/js/bootstrap.min.js"></script>
    <!-- https://getbootstrap.com/ -->
    <script src="admin/js/tooplate-scripts.js"></script>
    <script>
        Chart.defaults.global.defaultFontColor = 'white';
        let ctxLine,
            ctxBar,
            ctxPie,
            optionsLine,
            optionsBar,
            optionsPie,
            configLine,
            configBar,
            configPie,
            lineChart;
        barChart, pieChart;
        // DOM is ready
        $(function () {
            drawLineChart(); // Line Chart
            drawBarChart(); // Bar Chart
            drawPieChart(); // Pie Chart

            $(window).resize(function () {
                updateLineChart();
                updateBarChart();                
            });
        })
    </script>
</body>

</html>